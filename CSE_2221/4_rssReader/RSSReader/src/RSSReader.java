import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Spencer Qin
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int titleIndex = getChildElement(channel, "title");
        int descriptionIndex = getChildElement(channel, "description");
        int linkIndex = getChildElement(channel, "link");

        String title = "Empty Title";
        String description = "No description";
        String link = "#";

        if (channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            description = channel.child(descriptionIndex).child(0).label();
        }

        link = channel.child(linkIndex).child(0).label();

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("<style>");
        out.println("body { font-family: Arial, sans-serif; }");
        out.println("table { width: 100%; border-collapse: collapse; }");
        out.println("th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }");
        out.println("th { background-color: #f2f2f2; }");
        out.println("</style>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table>");
        out.println("<tr>");
        out.println("<th>Publication Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>Title</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                if (index == -1) {
                    index = i;
                }
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");
        int pubDateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");

        String title = "Empty Title";
        String description = "No description";
        String link = "#";
        String pubDate = "No date available";
        String source = "No source available";

        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            title = item.child(titleIndex).child(0).label();
            description = "";
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {
            description = item.child(descriptionIndex).child(0).label();
        }

        if (linkIndex != -1) {
            link = item.child(linkIndex).child(0).label();
        }

        if (pubDateIndex != -1 && item.child(pubDateIndex).numberOfChildren() > 0) {
            pubDate = item.child(pubDateIndex).child(0).label();
        }

        if (sourceIndex != -1) {
            XMLTree sourceTree = item.child(sourceIndex);
            String sourceUrl = sourceTree.attributeValue("url");
            source = "<a href=\"" + sourceUrl + "\">";
            if (sourceTree.numberOfChildren() > 0) {
                source += sourceTree.child(0).label();
            } else {
                source += sourceUrl;
            }
            source += "</a>";
        }

        out.println("<tr>");
        out.println("<td>" + pubDate + "</td>");
        out.println("<td>" + source + "</td>");
        out.println("<td><a href=\"" + link + "\">" + title + "</a>");
        if (!description.equals("No description")) {
            out.println("<br><small>" + description + "</small>");
        } else {
            out.println("<br><small>No description</small>");
        }
        out.println("</td>");
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // Get URL and output file name
        out.print("Enter the URL of an RSS 2.0 feed: ");
        String url = in.nextLine();
        out.print("Enter the name of the output file: ");
        String fileName = in.nextLine();

        // Check if URL is valid and file name conforms to basic rules
        if (!url.isEmpty() && !fileName.isEmpty()) {
            // Ensure the output file name ends with .html
            if (!fileName.toLowerCase().endsWith(".html")) {
                fileName += ".html"; // Append .html if not present
            }

            // Create XMLTree object
            XMLTree rss = new XMLTree1(url);

            if (rss.label().equals("rss") && rss.hasAttribute("version")
                    && rss.attributeValue("version").equals("2.0")) {
                XMLTree channel = rss.child(0);
                SimpleWriter fileOut = new SimpleWriter1L(fileName);
                outputHeader(channel, fileOut);

                // Process all items
                for (int i = 0; i < channel.numberOfChildren(); i++) {
                    if (channel.child(i).label().equals("item")) {
                        processItem(channel.child(i), fileOut);
                    }
                }

                outputFooter(fileOut);
                fileOut.close();
                out.println("HTML file created: " + fileName);
            } else {
                out.println("The provided URL does not contain a valid RSS 2.0 feed.");
            }
        } else {
            out.println(
                    "Invalid input. Please provide a valid URL and output file name.");
        }

        in.close();
        out.close();
    }

}
